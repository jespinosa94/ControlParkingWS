//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Cliente.Sonda {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SondaSoap11Binding", Namespace="http://master")]
    public partial class Sonda : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getFechaActualOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVolumenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Sonda() {
            this.Url = global::Cliente.Properties.Settings.Default.Cliente_Sonda_Sonda;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getFechaActualCompletedEventHandler getFechaActualCompleted;
        
        /// <remarks/>
        public event GetLedCompletedEventHandler GetLedCompleted;
        
        /// <remarks/>
        public event SetLedCompletedEventHandler SetLedCompleted;
        
        /// <remarks/>
        public event GetVolumenCompletedEventHandler GetVolumenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getFechaActual", RequestNamespace="http://master", ResponseNamespace="http://master", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string getFechaActual() {
            object[] results = this.Invoke("getFechaActual", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFechaActualAsync() {
            this.getFechaActualAsync(null);
        }
        
        /// <remarks/>
        public void getFechaActualAsync(object userState) {
            if ((this.getFechaActualOperationCompleted == null)) {
                this.getFechaActualOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFechaActualOperationCompleted);
            }
            this.InvokeAsync("getFechaActual", new object[0], this.getFechaActualOperationCompleted, userState);
        }
        
        private void OngetFechaActualOperationCompleted(object arg) {
            if ((this.getFechaActualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFechaActualCompleted(this, new getFechaActualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetLed", RequestNamespace="http://master", ResponseNamespace="http://master", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string GetLed() {
            object[] results = this.Invoke("GetLed", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLedAsync() {
            this.GetLedAsync(null);
        }
        
        /// <remarks/>
        public void GetLedAsync(object userState) {
            if ((this.GetLedOperationCompleted == null)) {
                this.GetLedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLedOperationCompleted);
            }
            this.InvokeAsync("GetLed", new object[0], this.GetLedOperationCompleted, userState);
        }
        
        private void OnGetLedOperationCompleted(object arg) {
            if ((this.GetLedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLedCompleted(this, new GetLedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:SetLed", RequestNamespace="http://master", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetLed([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string valor) {
            this.Invoke("SetLed", new object[] {
                        valor});
        }
        
        /// <remarks/>
        public void SetLedAsync(string valor) {
            this.SetLedAsync(valor, null);
        }
        
        /// <remarks/>
        public void SetLedAsync(string valor, object userState) {
            if ((this.SetLedOperationCompleted == null)) {
                this.SetLedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLedOperationCompleted);
            }
            this.InvokeAsync("SetLed", new object[] {
                        valor}, this.SetLedOperationCompleted, userState);
        }
        
        private void OnSetLedOperationCompleted(object arg) {
            if ((this.SetLedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetVolumen", RequestNamespace="http://master", ResponseNamespace="http://master", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string GetVolumen() {
            object[] results = this.Invoke("GetVolumen", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVolumenAsync() {
            this.GetVolumenAsync(null);
        }
        
        /// <remarks/>
        public void GetVolumenAsync(object userState) {
            if ((this.GetVolumenOperationCompleted == null)) {
                this.GetVolumenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVolumenOperationCompleted);
            }
            this.InvokeAsync("GetVolumen", new object[0], this.GetVolumenOperationCompleted, userState);
        }
        
        private void OnGetVolumenOperationCompleted(object arg) {
            if ((this.GetVolumenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVolumenCompleted(this, new GetVolumenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getFechaActualCompletedEventHandler(object sender, getFechaActualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFechaActualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFechaActualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLedCompletedEventHandler(object sender, GetLedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetLedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetVolumenCompletedEventHandler(object sender, GetVolumenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVolumenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVolumenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591